# 1. You push code to Github
# 2. CircleCI runs your tests
# 3. If your tests pass, then CircleCI will SSH -> droplet and execute a script
# 4. The script will trigger your droplet to pull down the latest changes from Github.
# 5. npm installs any new dependencies
# 6. PM2 restarts the Node.js application.

version: 2

general:
  # list of branches to build
  branches:
    only:
      - master
      - dev

jobs:
  build:
    docker:
      # specify the version you desire here
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/node:9.2.0

    working_directory: ~/repo

    steps:
      # Check versions
      - run:
          name: Checking Versions
          command: |
            node --version
            npm --version

      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-npm-deps-{{ checksum "package-lock.json" }}
            - v1-npm-deps
      - run:
          name: Install NPM dependencies
          # command: npm ci  #### npm version 5.8+
          command: npm i
      - save_cache:
          key: v1-npm-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

      # Build and Test
      - run:
          name: Build application
          command: npm run build

      # - run:
      #     name: Tests
      #     command: npm test

      - run:
          name: Echo env
          command: env

      # Deploy and profit
      - run:
          name: Update Code in Droplet
          # note: DROPLET_USER / DROPLET_IP vars are added in the CircleCI dashboard
          # note: the '.' after the source file is needed -- it tells scp to copy contents of the directory
          command: scp -oStrictHostKeyChecking=no -r ./build/. ${DROPLET_USER}@${DROPLET_IP}:${DROPLET_PATH}/build

      # - run:
      #     name: Update Code in Droplet
      #     # note: DROPLET_USER / DROPLET_IP vars are added in the CircleCI dashboard
      #     command: |
      #       echo "deploying..."
      #       ssh -o "StrictHostKeyChecking no" $DROPLET_USER@$DROPLET_IP << EOF
      #         cd /var/www/weshatch-v2/ #$DROPLET_PATH
      #         pm2 stop wh2
      #         git pull
      #         # npm install
      #         NODE_ENV=production pm2 start server/index.js --name "wh2"
      #         exit
      #       EOF

  # deployment:
  #   master:
  #     branch: master
        # command: |
        #   echo "deploying..."
        #   ssh -o "StrictHostKeyChecking no" $DROPLET_USER@$DROPLET_IP << EOF
        #     cd /var/www/weshatch-v2/ #$DROPLET_PATH
        #     pm2 stop wh2
        #     git pull
        #     # npm install
        #     pm2 start server/index.js --name "wh2"
        #     exit
        #   EOF

  #   development:
  #     branch: dev
  #     commands:
  #       - scp -r $CIRCLE_PROJECT_REPONAME/build $DROPLET_USER@$DROPLET_IP:/var/www/weshatch-v2/build
